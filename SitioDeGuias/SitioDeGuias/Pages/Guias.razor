@page "/guias"
@inject HttpClient Http
@using System.Globalization
@using SitioDeGuias.Shared

<PageTitle>Guias</PageTitle>

<MudAutocomplete FullWidth="false" Class="pa-5" T="string" Label="Países" @bind-Value="_value" SearchFunc="@Search"
                 ResetValueOnEmptyText="true"
                 AdornmentIcon="@Icons.Filled.Search"
                 CoerceText="true" CoerceValue="true"/>

<MudSelect @bind-Value="@_sortMode" Label="Ordenar" Style="@("color: #252525")" Variant="Variant.Outlined">
    <MudSelectItem Value="@("Pais")"/>
    <MudSelectItem Value="@("Guia")"/>
    <MudSelectItem Value="@("Año")"/>
    <MudSelectItem Value="@("Ninguno")"/>
</MudSelect>

@if (_sortMode == "Pais" || _sortMode == "Guia" ||
     _sortMode == "Año" || _sortMode == "Ninguno")
{
    SortCards();
}

@if (_countriesNames.Contains(_value))
{
    int i = _countriesNames.IndexOf(_value);

    <MudPaper Class="d-flex justify-center align-center flex-wrap gap-5 pa-5">
        <GuideCard Country="@_countries[i].Country" GuideDescription="@_countries[i].GuideDescription"
                   Year="@_countries[i].Year" GuideName="@_countries[i].GuideName"></GuideCard>
    </MudPaper>
}
else
{
    <MudPaper Class="d-flex justify-center align-start flex-wrap gap-5 pa-5">
        @for (int j = 0; j < _countriesNames.Count; j++)
        {
            int i = j;

            <GuideCard Country="@_countries[i].Country" GuideDescription="@_countries[i].GuideDescription"
                       Year="@_countries[i].Year" GuideName="@_countries[i].GuideName"></GuideCard>
        }
    </MudPaper>
}


@code
{
    private string? _value;
    private string? _sortMode { get; set; } = "Ordenar";
    List<string> _countriesNames = new();

    private static CountryFetch[]? _countries;

    protected override async Task OnInitializedAsync()
    {
        _countries = await Http.GetFromJsonAsync<CountryFetch[]>("Jsons/countries.json");

        if (_countries != null)
            for (int i = 0; i < _countries.Length; i++)
            {
                var country = _countries[i].Country;
                if (country != null)
                    _countriesNames.Add(country);
            }
    }

    public class CountryFetch
    {
        public int? Id { get; set; }

        public string? Country { get; set; }

        public string? GuideName { get; set; }

        public int? Year { get; set; }

        public string? GuideDescription { get; set; }
    }


    private async Task<IEnumerable<string>> Search(string value)
    {
        await Task.Delay(5);

        if (string.IsNullOrEmpty(value))
            return new string[0];
        return _countriesNames.Where(x => x.Contains(value, StringComparison.InvariantCultureIgnoreCase));
    }

    private void SortCards()
    {
        if (_countries != null)

            if (_sortMode!.Equals("Pais"))
            {
                _countries = _countries.OrderBy(country => (int)country.Country[0]).ToArray();
            }
            else if (_sortMode!.Equals("Guia"))
            {
                _countries = _countries.OrderBy(country => (int)country.GuideName[0]).ToArray();
            }
            else if (_sortMode!.Equals("Año"))
            {
                _countries = _countries.OrderBy(country => country.Year).ToArray();
            }
            else
            {
                _countries = _countries.OrderBy(country => country.Id).ToArray();
            }

        _countriesNames = new List<string>();
        for (int i = 0; i < _countries.Length; i++)
        {
            var country = _countries[i].Country;
            if (country != null)
                _countriesNames.Add(country);
        }
    }
}